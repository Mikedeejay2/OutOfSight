buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = mod_group
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false

    String myJvmArgs = "-Dfml.coreMods.load=${mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)}"
    String myRunArgs = "--mixin ${mod_mixin_configs.replace('${mod_id}', mod_id)}"
    runs {
        client {
            args = [myRunArgs]
            jvmArgs = [myJvmArgs]
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            args = [myRunArgs]
            jvmArgs = [myJvmArgs]
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
//
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
//
//    runs {
//        client {
//            workingDirectory project.file('run')
//
//            arg "-mixin.config=out_of_sight.mixins.json"
//
//            // Recommended logging data for a userdev environment
//            // The markers can be changed as needed.
//            // "SCAN": For mods scan.
//            // "REGISTRIES": For firing of registry events.
//            // "REGISTRYDUMP": For getting the contents of all registries.
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            // Recommended logging level for the console
//            // You can set various levels here.
//            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
//            property 'forge.logging.console.level', 'debug'
//
//            mods {
//                test {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        server {
//            workingDirectory project.file('run')
//
//            // Recommended logging data for a userdev environment
//            // The markers can be changed as needed.
//            // "SCAN": For mods scan.
//            // "REGISTRIES": For firing of registry events.
//            // "REGISTRYDUMP": For getting the contents of all registries.
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            // Recommended logging level for the console
//            // You can set various levels here.
//            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
//            property 'forge.logging.console.level', 'debug'
//
//            mods {
//                test {
//                    source sourceSets.main
//                }
//            }
//        }
//    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compile('org.spongepowered:mixin:0.8.2') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

//sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, "out_of_sight.refmap.json"
}

jar {
    from {
        configurations.compile
                .filter { "mixin-0.8.2.jar" == it.name }
                .collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest {
        attributes "FMLCorePlugin": mod_core_plugin
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": mod_mixin_configs.replace('${mod_id}', mod_id)
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
